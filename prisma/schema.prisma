// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Listing  Listing[]

  stripeCustomerId       String?         @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?         @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?         @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?       @map(name: "stripe_current_period_end")
  SavedListings          SavedListings[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Listing {
  id    Int    @id @default(autoincrement())
  title String
  slug  String @unique

  status ListingStatus @default(PUBLISHED)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  ListingInfo     ListingInfo?
  ListingLocation ListingLocation?
  ListingPhotos   ListingPhotos[]
  ListingPrice    ListingPrice?
  SavedListings   SavedListings[]

  @@index([slug])
  @@map(name: "listings")
}

enum ListingStatus {
  PUBLISHED
  UNPUBLISHED
}

model ListingInfo {
  id           Int    @id @default(autoincrement())
  description  String
  numberOfBeds Int
  flooAreaInM2 Int
  floor        Floor

  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map(name: "listing_info")
}

enum Floor {
  BASEMENT
  GROUND
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  NINTH
  TENTH
  ELEVENTH
  TWELFTH
  THIRTEENTH
  FOURTEENTH
  FIFTEENTH
  SIXTEENTH
  SEVENTEENTH
  EIGHTEENTH
  NINETEENTH
  TWENTIETH
  TWENTY_FIRST
  TWENTY_SECOND
  TWENTY_THIRD
  TWENTY_FOURTH
  TWENTY_FIFTH
  TWENTY_SIXTH
  TWENTY_SEVENTH
  TWENTY_EIGHTH
  TWENTY_NINTH
  THIRTY
  THIRTY_FIRST
  THIRTY_SECOND
  THIRTY_THIRD
  THIRTY_FOURTH
  THIRTY_FIFTH
  THIRTY_SIXTH
  THIRTY_SEVENTH
  THIRTY_EIGHTH
  THIRTY_NINTH
  FORTY
  FORTY_FIRST
  FORTY_SECOND
  FORTY_THIRD
  FORTY_FOURTH
  FORTY_FIFTH
  FORTY_SIXTH
  FORTY_SEVENTH
  FORTY_EIGHTH
  FORTY_NINTH
  FIFTY
  ABOVE_FIFTY
  ALL_FLOORS
  OTHER
}

model ListingPrice {
  id             Int          @id @default(autoincrement())
  price          Decimal
  currency       String       @default("USD")
  currencySymbol String       @default("$")
  rentInterval   RentInterval @default(MONTH)

  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map(name: "listing_price")
}

enum RentInterval {
  MONTH
  WEEK
  DAY
}

model ListingLocation {
  id  Int   @id @default(autoincrement())
  lat Float
  lng Float

  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map(name: "listing_location")
}

model ListingPhotos {
  id  Int    @id @default(autoincrement())
  url String
  alt String

  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map(name: "listing_photos")
}

model SavedListings {
  id        Int     @id @default(autoincrement())
  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "saved_listings")
  @@unique([userId, listingId])
}
